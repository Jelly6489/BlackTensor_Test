python -> 네이버 크롤링
삼성전자 이외에 하나투어, 셀트리온도 가져와야 함.
배열로 가져올 생각.

### slack
mento200813

# 삼성전자
CREATE TABLE a_005930 (
    -> seq int not null auto_increment,
    -> date date not null,
    -> close int(11),
    -> diff int(11),
    -> open int(11),
    -> high int(11),
    -> low int(11),
    -> volume int(11),
    -> PRIMARY KEY(seq)
    -> ) ENGINE=InnoDB DEFAULT CHARS ET=utf8;

# naver crowling(stock)
https://excelsior-cjh.tistory.com/109

http://blog.daum.net/sualchi/13720561

https://bumcrush.tistory.com/116


# git flask stock
https://github.com/myungseokang/PaperStock

# flask db 연결(todolist)
https://ychae-leah.tistory.com/6

###mento 1 : pandas
https://blog.naver.com/PostView.nhn?blogId=ji0eeeee&logNo=221527166066
###mento 2 : Flask csv file
https://parksrazor.tistory.com/461
###mento 3 : Flask hello world
https://parksrazor.tistory.com/425
###mento 4 : Flask-Restful 
https://skylit.tistory.com/286





### Java에서 getter&setter에 해당
context : str = ''
fname: str = ''
train: object = None
test: object = None
id : str = ''
lable : str = ''

DAO == Repository

ENtity == dto
- getter setter

vo == 
- readOnly 특징

com -> domain -> java 소스에 해당
requirements.txt -> dependency 외부 라이브러리 -> gradile -->> di
pip 

setup.py --> com_sba_api 제어 

설정파일 제외하고는 모두 com_sba_api에 있어야 함.

1. requirements -> setup
2. 

python run.py

CORS -->

init 

## ORM Model
https://beomi.github.io/2017/10/20/DB-To-SQLAlchemy-Model/


### mento git
https://github.com/parkjungkwan/sba-4-api/blob/ducks/com_sba_api/resources/cabbage.py

주식
1. 긍정부정 <월>
https://somjang.tistory.com/entry/Keras%EA%B8%B0%EC%82%AC-%EC%A0%9C%EB%AA%A9%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0-%EA%B8%8D%EC%A0%95-%EB%B6%80%EC%A0%95-%EC%A4%91%EB%A6%BD-%EB%B6%84%EB%A5%98%ED%95%98%EB%8A%94-%EB%AA%A8%EB%8D%B8-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EA%B8%B0

# 검색어 기반 크롤링
https://m.blog.naver.com/PostView.nhn?blogId=seodaeho91&logNo=221269288709&proxyReferer=https:%2F%2Fwww.google.com%2F

# 크롤링
https://koreanfoodie.me/118

# multiprocessing 크롤링
https://beomi.github.io/2017/07/05/HowToMakeWebCrawler-with-Multiprocess/

2. 예상 순익 예측<수>
https://gem1n1.tistory.com/75
3. 특정일 주가예측<금>

코로나 
1. 현황판 <월>
2. 경제뉴스 요약<수>


####
예상 주당 순이익(EPS) * 정상 PER = 적정주가(기업의 가치)

# PER, PBR 지표와 수익률 상관관계
https://www.snek.ai/alpha/article/108784

# 주가 예측1 (keras)
https://keraskorea.github.io/posts/2018-10-25-Keras%EB%A5%BC%20%ED%99%9C%EC%9A%A9%ED%95%9C%20%EC%A3%BC%EC%8B%9D%20%EA%B0%80%EA%B2%A9%20%EC%98%88%EC%B8%A1/

# 주가 예측2 (keras)
https://diane-space.tistory.com/115

# 주가 예측3
https://m.post.naver.com/viewer/postView.nhn?volumeNo=29132930&memberNo=18071586

# 주가 예측4
https://m.blog.naver.com/wideeyed/221160038616


# Graph 그리고 보내기
https://frhyme.github.io/python-libs/graphviz_to_svg/


GDP, 코스피, 원유(유가), 환율(Exchange Rate), 미국 증시

 - 환율 정보 크롤링
 - 환율 정보 바탕으로 LSTM --> 주가 예측
http://blog.naver.com/PostView.nhn?blogId=koko8624&logNo=221288761509

# 미국
https://finance.naver.com/marketindex/exchangeDailyQuote.nhn?marketindexCd=FX_USDKRW
# 일본
https://finance.naver.com/marketindex/exchangeDailyQuote.nhn?marketindexCd=FX_JPYKRW
# 유럽
https://finance.naver.com/marketindex/exchangeDailyQuote.nhn?marketindexCd=FX_EURKRW
# 중국
https://finance.naver.com/marketindex/exchangeDailyQuote.nhn?marketindexCd=FX_CNYKRW
# WTI
https://finance.naver.com/marketindex/exchangeDailyQuote.nhn?marketindexCd=OIL_CL&fdtc=2
# 국제금
https://finance.naver.com/marketindex/exchangeDailyQuote.nhn?marketindexCd=CMDT_GC&fdtc=2




class CheeseDao(CheeseDto):

    # @classmethod
    # def bulk(cls, cheese_dfo):
    #     # cheeseDfo = CheeseDfo()
    #     # df = CheeseDfo.new()
    #     dfo = cheese_dfo.create()
    #     print(dfo.head())
    #     session.bulk_insert_mappings(cls, dfo.to_dict(orient="records"))
    #     session.commit()
    #     session.close()

    @staticmethod
    def bulk():
        print("========cheese DAO 1========")
        cheeseDfo = CheeseDfo()
        df = cheeseDfo.cheese_df()
        print("========cheese DAO 2========")
        print(df.head())
        session.bulk_insert_mappings(CheeseDto, df.to_dict(orient="records"))
        session.commit()
        session.close()

    @classmethod
    def count(cls):
        return session.query(func.count(cls.cheese_id)).one()

    @staticmethod
    def save(cheese):
        Session = openSession()
        session = Session()
        session.add(cheese)
        session.commit()


    @classmethod
    def find_all(cls):
        #cheese = session.query(CheeseVo).all()
        return cls.query.all()

    @classmethod
    def find_by_cheese(cls, cheese_id):
        # rst = cls.query.filter(cls.cheese_id == cheese_id).one()
        # print(f'find_by_cheese {rst}')
        return session.query(cls).filter(cls.cheese_id == cheese_id).one()
        # return session.query(func.filter(cls.cheese_id == cheese_id)).one()

    # @classmethod
    # def find_by_category(cls, category):
    #     # return session.query(cls).filter(cls.category == category).all()
    #     return session.query(cls).filter(cls.category.like(category)).all()

    @classmethod
    def find_by_category(cls, category):
        # return session.query(cls).filter(cls.category == category).all()
        print("================find_by_category()================")
        return session.query(cls).filter(cls.category.like(f'%{category}%')).all()

    # @classmethod
    # def find_by_name(cls, name):
    #     return cls.query.filter_by(name == name).all()

    # @classmethod
    # def update(cls, cheese):
    #     session.query(cls).filter(cls.cheese_id == cheese['cheese_id'])\
    #         .update({cls.ranking:cheese['ranking'],\
    #             cls.category:cheese['category'],\
    #             cls.brand:cheese['brand'],\
    #             cls.name:cheese['name'],\
    #             cls.content:cheese['content'],\
    #             cls.texture:cheese['texture'],\
    #             cls.types:cheese['types'],\
    #             cls.price:cheese['price'],\
    #             cls.img:cheese['img']})
                
    #     session.add(cheese)
    #     session.commit()
    #     session.close()
    #     print('[cheese_dao.py] -> Data Update Complete!!!')

    @staticmethod
    def update(cheese):
        session.query(CheeseDto).filter(CheeseDto.cheese_id == cheese['cheese_id'])\
            .update({CheeseDto.ranking:cheese['ranking'],\
                CheeseDto.category:cheese['category'],\
                CheeseDto.brand:cheese['brand'],\
                CheeseDto.name:cheese['name'],\
                CheeseDto.content:cheese['content'],\
                CheeseDto.texture:cheese['texture'],\
                CheeseDto.types:cheese['types'],\
                CheeseDto.price:cheese['price'],\
                CheeseDto.img:cheese['img']})

        # session.add(cheese)
        session.commit()
        session.close()
        print('[cheese_dao.py] -> Data Update Complete!!!')


    @classmethod
    def delete(cls, cheese_id):
        cheese = cls.query.get(cheese_id)
        db.session.delete(cheese)
        db.session.commit()


# if __name__ == '__main__':
#     CheeseDao.bulk()